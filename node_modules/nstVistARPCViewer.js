/*
	VistA Remote Procedure Call Viewer
	Author: Nikolay Topalov

	Copyright 2014 Nikolay Topalov

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/
var vista = require('nstNodeVistA');

// returns M routine code
var getRoutineCode = function(ewd, pRoutineName) {
		// Cache stores routines in ^ROUTINE
		//var root = new ewd.mumps.GlobalNode('ROUTINE', [params.routineName]);		
		//var routine = root._getDocument();
		
		// use function to get the routine code
		var param = {"input": [ {"value" : pRoutineName} ]};
		var tempGlobal = new ewd.mumps.GlobalNode('TMP',['ewd',process.pid,'RPC']);
		tempGlobal._delete();
		tempGlobal._setDocument(param);
	
		var tmp = getNA(tempGlobal._node);  // e.g., ^TMP("ewd","3740","RPC")
		var res = ewd.mumps.function("getRoutine^nstNodeUtils",tmp);
		var routineCode = tempGlobal.$('result')._getDocument();
		return routineCode;
	};

// returns a global node as a string 	
var getNA = function(globalNode) {  //,'^' + ewd.temp._globalName + '("' + ewd.temp._subscripts.join('","') + '","RPC")'; 
    var globalName = "^" + globalNode.global + "("; 
	
	if (globalNode.subscripts.length > 0) {
		globalName +=  '"' + globalNode.subscripts.join('","') + '"';
	}
	
	if (arguments.length > 1) {
		var args = [];
		for (var i = 1; i < arguments.length; i++) {
			args.push(arguments[i]);
		}
		if (globalNode.subscripts.length > 0) {
			globalName += ',';
		}
		globalName += '"' + args.join('","') + '"';
	};
	
	globalName += ')';
	
	return globalName;   
};	
	// simple $piece 
var piece = function(str,delimiter,position) {
		
		if (str === undefined) return "";
		
		var buf = str.split(delimiter);
		
		return (buf[position-1] === undefined) ? "" : buf[position-1]; 
		
	};

 	// returns word-processing field value
	// root is the global node of the field e.g., ^XWB(8994,D0,1)
var wordProcessingGlobal = function(root) {

		var result = "";
		var line;
		var x = root._getDocument();
		for (line in x) {
			if (line > 0) result += x[line] + '\n';
		}
				
		return result;	
	}; 
	
	// returns word-processing field value
	// root is the array with the WP field value
var wordProcessingArray = function(root) {

		var result = "";
		var line;
		for (line in root) {
			if (line > 0) result += root[line] + '\n';
		}
				
		return result;	
	};
	
module.exports = {
	
	onMessage: {
	
	'processSelection': function(params, ewd) {
	
		var sessid = ewd.session.$('ewd_sessid')._value;
	
		//ewd.log('*** Incoming Web Socket message received: ' + JSON.stringify(wsMsg, null, 5), 1);
		
	/* 	if (type === 'processSelection') { */

			// Set parameters
			var pIENFrom = Number(params.ienFrom);
			var pIENTo = Number(params.ienTo);
			var pNameStart = params.nameStart;
			var pNameContain = params.nameContain;
			var pRoutine = params.routine;
			
			// Set the IEN input range if need it
			pIENFrom = pIENFrom === 0 ? pIENTo : pIENFrom;
			pIENTo = pIENTo === 0 ? pIENFrom : pIENTo;
							
			var results = [] ;
			var ok;      // flag for a hit
			var rpcs = new ewd.mumps.GlobalNode('XWB', [8994]);			
			var ien = 0;
			
			do {
				ien = rpcs._next(ien);  // get next node ^XWB(8994,ien)
				
				if (isNaN(ien)) break;  // quit if it is not a number
								
				var pieces = rpcs.$(ien).$(0)._value.split('^');
				var rpcName = pieces[0];
									
				ok = ien >= pIENFrom && ien <= pIENTo;  // IEN between
		
				if (!ok) {
					var pieces = rpcs.$(ien).$(0)._value.split('^');
					var rpcName = pieces[0];
					var rpcRoutine = (typeof pieces[2] === 'undefined') ? "" : pieces[2];
									
					if ((pNameStart.length > 0) && (ok || (rpcName.slice(0, pNameStart.length) === pNameStart)))
					{
						ok = true;	
					} else if ((pNameContain.length > 0) && (ok || (rpcName.indexOf(pNameContain) != -1 ))) {
						ok = true;
					} else if ((pRoutine.length > 0) && (ok || (rpcRoutine.slice(0, pRoutine.length) === pRoutine))) {
						ok = true;	
					}
				};
					
				if (ok) results.push( {ien: ien, name: pieces[0]});	
			} while (true);	
						
			ewd.sendWebSocketMsg({
				type: 'selectedRPCList',
				params: results
			});
			return;		
		},
		
		'getRPCDetails' : function(params, ewd) {
			// Set parameters
			var ien = Number(params.rpcIEN);
			
			var root = new ewd.mumps.GlobalNode('XWB', [8994, ien]);
			
			var rpcRaw = root._getDocument();
			
			var rpc = { };
			rpc.inputParameters = [];
			var buf;
			var inputParameter;
			var i;
			
			// 1=NAME, 2=TAG, 3=ROUTINE, 4=RETURN VALUE TYPE, 5=AVAILABILITY, 6=INACTIVE, 7=CLIENT MANAGER, 
			// 8=WORD WRAP ON, 9=VERSION, 10=SUPPRESS RDV USER SETUP, 11=APP PROXY ALLOWED
			buf = root.$(0)._value;
			
			rpc.ien = ien;
			rpc.name = piece(buf,"^",1);
			rpc.tag = piece(buf,"^",2);
			rpc.routine = piece(buf,"^",3);	
			rpc.returnValueType = vista.fmFieldExternalValue(ewd, "8994", ".04", "", piece(buf,"^",4));
			rpc.availability = vista.fmFieldExternalValue(ewd, "8994", ".05", "", piece(buf,"^",5)); 
			rpc.inactive = vista.fmFieldExternalValue(ewd, "8994", ".06", "", piece(buf,"^",6)); 
			rpc.clientManager = piece(buf,"^",7);
			rpc.wordWrapOn = vista.fmFieldExternalValue(ewd, "8994", ".08", "", piece(buf,"^",8));
			rpc.version = piece(buf,"^",9);
			
			rpc.description = wordProcessingGlobal(root.$(1));
			rpc.returnValueDescription = wordProcessingGlobal(root.$(3));;
		
			var inputParameters = root.$(2)._getDocument(); 
		
			for (i in inputParameters) {
				if (!(Number(i) > 0)) continue;
				
				// 1=INPUT PARAMETER, 2=PARAMETER TYPE, 3=MAXIMUM DATA LENGTH, 4=REQUIRED, 5=SEQUENCE NUMBER
				buf = inputParameters[i][0];
				
				inputParameter = {};
				inputParameter.name = piece(buf,"^",1);				
				inputParameter.type = vista.fmFieldExternalValue(ewd, "8994.02", ".02", "", piece(buf,"^",2));
				inputParameter.maximumLength = piece(buf,"^",3);
				inputParameter.required = vista.fmFieldExternalValue(ewd, "8994.02", ".04", "", piece(buf,"^",4));
				inputParameter.sequence = piece(buf,"^",5);
				inputParameter.description = wordProcessingArray(inputParameters[i][1]);
				rpc.inputParameters.push(inputParameter);
			} ;
			
			return  rpc;
		},
		
		'getRoutine' : function(params, ewd) {
			// Set parameters
			var result = [];
			var line;
			var routineName = params.routineName;
			var routineTag = params.routineTag;
		
			var routineCode = getRoutineCode(ewd, routineName); 
			
			for (var i in routineCode) { result.push(routineCode[i][0]); };
		
			return  {"routineName": routineName, "routineTag": routineTag, "routine": result}; 
		},
		
		'executeRPC' : function(params, ewd) {
			 var rpc = vista.rpcNew(params.name);
				rpc.input = params.input;
				rpc.duz = params.duz;
				rpc.division = params.division;
				rpc.context = params.context; 
			
			var result = vista.rpcExecute(ewd, rpc);

			return result;
		}
	}
};